<!DOCTYPE html>
<html lang="<%= lang %>">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= t.activityDetailsTitle %>
            <%= activity.name %>
    </title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <div class="lang-switcher">
        <a href="?lang=pt">PT</a> |
        <a href="?lang=en">EN</a> |
        <a href="?lang=es">ES</a>
    </div>

    <h1>
        <%= activity.name %>
    </h1>

    <div class="summary">
        <div><strong>
                <%= t.date %>:
            </strong>
            <%= formattedDate %>
        </div>
        <div><strong>
                <%= t.distance %>:
            </strong>
            <%= (activity.distance / 1000).toFixed(2) %> km
        </div>
        <div><strong>
                <%= t.movingTime %>:
            </strong>
            <%= new Date(activity.moving_time * 1000).toISOString().substr(11, 8) %>
        </div>
        <div><strong>
                <%= t.elevationGain %>:
            </strong>
            <%= activity.total_elevation_gain %> m
        </div>
    </div>

    <div id="map"></div>

    <div class="upload-container">
        <% if (errorMessage) { %>
            <div class="error-message">
                <%= errorMessage %>
            </div>
            <% } %>

                <% if (formattedVideoDate) { %>
                    <div class="video-info">
                        <strong>Data de Cria√ß√£o do V√≠deo:</strong>
                        <%= formattedVideoDate %>
                    </div>
                    <% } %>

                        <h2>
                            <%= t.syncVideo %>
                        </h2>
                        <p>
                            <%= t.syncVideoHelp %>
                        </p>

                        <form action="/activity/<%= activity.id %>/upload" method="post" enctype="multipart/form-data">
                            <div class="file-input-wrapper">
                                <span class="btn-file-dummy" onclick="document.getElementById('videoFile').click()">
                                    <%= t.chooseFile %>
                                </span>
                                <span id="fileName" class="file-name">
                                    <%= t.noFileChosen %>
                                </span>
                                <input type="file" name="videoFile" id="videoFile" accept="video/*" required
                                    style="display: none;" onchange="updateFileName(this)">
                            </div>
                            <button type="submit">
                                <%= t.uploadAndSync %>
                            </button>
                        </form>

                        <!-- Funcionalidades de Overlay (se dispon√≠vel) -->
                        <% if (typeof showOverlayOptions !=='undefined' && showOverlayOptions) { %>
                            <div style="margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                                <h3>üé¨ Overlays Avan√ßados</h3>
                                <p>Gere overlays din√¢micos com velocidade, dire√ß√£o e for√ßa G!</p>

                                <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px;">
                                    <button type="button" onclick="generatePreview()" class="connect-button"
                                        style="margin: 0;">
                                        üëÄ Preview (30s)
                                    </button>
                                    <button type="button" onclick="processFullVideo()" class="connect-button"
                                        style="margin: 0; background: #28a745;">
                                        üéØ Processamento Completo
                                    </button>
                                </div>

                                <!-- √Årea de resultado -->
                                <div id="result-area" style="margin-top: 20px;"></div>
                            </div>
                            <% } %>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        // Vari√°veis globais
        const activityId = '<%= activity.id %>';
        const lang = '<%= lang %>';

        // Fun√ß√£o para atualizar nome do arquivo
        function updateFileName(input) {
            const fileName = input.files[0] ? input.files[0].name : '<%= t.noFileChosen %>';
            document.getElementById('fileName').textContent = fileName;
            console.log('Arquivo selecionado:', fileName);
        }

        // Inicializa√ß√£o do mapa
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM carregado, inicializando mapa...');

            try {
                const trackpoints = <% - JSON.stringify(trackpoints || []) %>;
                const videoStartPoint = <% - JSON.stringify(videoStartPoint || null) %>;
                const t = <% - JSON.stringify(t || {}) %>;

                console.log('Dados do mapa:', {
                    trackpoints: trackpoints.length,
                    videoStartPoint: !!videoStartPoint,
                    t: !!t
                });

                const latLngData = trackpoints.map(p => p.latlng).filter(p => p && Array.isArray(p) && p.length === 2);
                console.log('Pontos GPS v√°lidos:', latLngData.length);

                if (latLngData.length > 0) {
                    // Criar mapa
                    const map = L.map('map').setView(latLngData[0], 13);
                    console.log('Mapa criado com sucesso');

                    // Adicionar tiles
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    }).addTo(map);

                    // Desenhar rota
                    const polyline = L.polyline(latLngData, { color: '#fc5000', weight: 4 }).addTo(map);
                    map.fitBounds(polyline.getBounds().pad(0.1));
                    console.log('Rota desenhada com sucesso');

                    // Adicionar marcadores
                    const activityStartLatLng = latLngData[0];
                    const activityEndLatLng = latLngData[latLngData.length - 1];
                    const videoSyncLatLng = (videoStartPoint && videoStartPoint.latlng) ? videoStartPoint.latlng : null;

                    // Fun√ß√£o para criar √≠cones
                    const createIcon = (color) => L.icon({
                        iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${color}.png`,
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                        shadowSize: [41, 41]
                    });

                    const startIcon = createIcon('green');
                    const endIcon = createIcon('red');
                    const originalStartIcon = createIcon('grey');
                    const videoIcon = createIcon('blue');

                    // Marcador do fim
                    L.marker(activityEndLatLng, { icon: endIcon })
                        .addTo(map)
                        .bindPopup(`<strong>${t.end || 'Fim'}</strong>`);

                    if (videoSyncLatLng) {
                        console.log('Adicionando marcador do v√≠deo:', videoSyncLatLng);

                        // Marcador do v√≠deo
                        const videoMarker = L.marker(videoSyncLatLng, { icon: videoIcon })
                            .addTo(map)
                            .bindPopup(`<strong>üìπ In√≠cio do V√≠deo</strong><br/>
                                       <small>Coordenada: ${videoSyncLatLng[0].toFixed(6)}, ${videoSyncLatLng[1].toFixed(6)}</small>`);

                        // Se diferente do in√≠cio da atividade
                        if (videoSyncLatLng[0] !== activityStartLatLng[0] || videoSyncLatLng[1] !== activityStartLatLng[1]) {
                            L.marker(activityStartLatLng, { icon: originalStartIcon })
                                .addTo(map)
                                .bindPopup(`<strong>${t.originalStart || 'In√≠cio Original'}</strong>`);
                        }

                        // Destacar marcador do v√≠deo
                        setTimeout(() => {
                            videoMarker.openPopup();
                        }, 1000);
                    } else {
                        // Apenas in√≠cio da atividade
                        L.marker(activityStartLatLng, { icon: startIcon })
                            .addTo(map)
                            .bindPopup(`<strong>${t.start || 'In√≠cio'}</strong>`);
                    }

                    console.log('Marcadores adicionados com sucesso');
                } else {
                    document.getElementById('map').innerHTML = `<p style="text-align: center; padding: 50px; color: #666;">${t.noGpsData || 'Dados GPS n√£o dispon√≠veis.'}</p>`;
                }
            } catch (e) {
                console.error("Erro ao renderizar o mapa:", e);
                document.getElementById('map').innerHTML = '<p style="text-align: center; padding: 50px; color: #e74c3c;">Erro ao carregar o mapa.</p>';
            }
        });

        // Fun√ß√µes para overlay (se dispon√≠vel)
        <% if (typeof showOverlayOptions !== 'undefined' && showOverlayOptions) { %>
            function showResult(message) {
                document.getElementById('result-area').innerHTML = `
                <div style="background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px; margin-top: 15px;">
                    ${message}
                </div>
            `;
            }

            function showError(message) {
                document.getElementById('result-area').innerHTML = `
                <div style="background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px; border-radius: 5px; margin-top: 15px;">
                    <strong>Erro:</strong> ${message}
                </div>
            `;
            }

            async function generatePreview() {
                const fileInput = document.getElementById('videoFile');
                if (!fileInput.files[0]) {
                    alert('Por favor, selecione um arquivo de v√≠deo primeiro.');
                    return;
                }

                const formData = new FormData();
                formData.append('videoFile', fileInput.files[0]);

                document.getElementById('result-area').innerHTML = `
                <div style="text-align: center; padding: 20px;">
                    <p>‚è≥ Gerando preview com overlays...</p>
                </div>
            `;

                try {
                    const response = await fetch(`/activity/${activityId}/preview`, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showResult(`
                        <h4>‚úÖ Preview gerado com sucesso!</h4>
                        <p>üìä Overlays criados: <strong>${result.overlaysCount}</strong></p>
                        <p><a href="${result.downloadUrl}" download style="background: #007bff; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px;">üì• Download Preview</a></p>
                    `);
                    } else {
                        showError(result.error);
                    }
                } catch (error) {
                    showError('Erro na comunica√ß√£o: ' + error.message);
                }
            }

            async function processFullVideo() {
                const fileInput = document.getElementById('videoFile');
                if (!fileInput.files[0]) {
                    alert('Por favor, selecione um arquivo de v√≠deo primeiro.');
                    return;
                }

                if (!confirm('‚ö†Ô∏è O processamento completo pode demorar v√°rios minutos. Deseja continuar?')) {
                    return;
                }

                const formData = new FormData();
                formData.append('videoFile', fileInput.files[0]);

                document.getElementById('result-area').innerHTML = `
                <div style="text-align: center; padding: 20px;">
                    <p>‚è≥ Processando v√≠deo completo com overlays din√¢micos...</p>
                    <p><small>Isso pode demorar alguns minutos...</small></p>
                </div>
            `;

                try {
                    const response = await fetch(`/activity/${activityId}/process-overlays`, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showResult(`
                        <h4>üéâ V√≠deo processado com sucesso!</h4>
                        <p><strong>M√©todo:</strong> ${result.processingMethod === 'complex' ? 'Overlays Din√¢micos' : 'Overlay Est√°tico'}</p>
                        <p><strong>Overlays:</strong> ${result.statistics.overlaysGenerated || 'N/A'}</p>
                        <p><strong>Velocidade m√°xima:</strong> ${result.statistics.maxSpeed || 0} km/h</p>
                        <p><a href="${result.downloadUrl}" download style="background: #28a745; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-size: 16px;">üé¨ Download V√≠deo Completo</a></p>
                    `);
                    } else {
                        showError(result.error);
                    }
                } catch (error) {
                    showError('Erro na comunica√ß√£o: ' + error.message);
                }
            }
        <% } %>

            // Debug de inicializa√ß√£o
            console.log('Script carregado completamente');
        console.log('Activity ID:', activityId);
        console.log('Language:', lang);
    </script>

    <noscript>
        <div
            style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; margin: 20px auto; max-width: 800px; border-radius: 8px;">
            <h3 style="color: #856404;">‚ö†Ô∏è JavaScript Necess√°rio</h3>
            <p style="color: #856404;">Para usar todas as funcionalidades, habilite JavaScript no seu navegador.</p>
        </div>
    </noscript>
</body>

</html>