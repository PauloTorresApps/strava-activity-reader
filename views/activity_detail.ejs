<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= t.activityDetailsTitle %><%= activity.name %></title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1><%= activity.name %></h1>
   <div class="summary">
        <div><strong><%= t.date %>:</strong> <%= formattedDate %></div> <!-- ADICIONE ESTA LINHA -->
        <div><strong><%= t.distance %>:</strong> <%= (activity.distance / 1000).toFixed(2) %> km</div>
        <div><strong><%= t.movingTime %>:</strong> <%= new Date(activity.moving_time * 1000).toISOString().substr(11, 8) %></div>
        <div><strong><%= t.elevationGain %>:</strong> <%= activity.total_elevation_gain %> m</div>
    </div>

    <div id="map"></div>

    <div class="upload-container">
        <% if (errorMessage) { %>
            <div class="error-message"><%= errorMessage %></div>
        <% } %>

        <% if (formattedVideoDate) { %>
            <div class="video-info">
                <strong><%= t.videoCreationTimeLabel %></strong> <%= formattedVideoDate %>
            </div>
        <% } %>

        <h2><%= t.syncVideo %></h2>
        <p><%= t.syncVideoHelp %></p>
        
        <form action="/activity/<%= activity.id %>/upload" method="post" enctype="multipart/form-data">
            <div class="file-input-wrapper">
                <span class="btn-file-dummy"><%= t.chooseFile %></span>
                <span id="fileName" class="file-name"><%= t.noFileChosen %></span>
                <input type="file" name="videoFile" id="videoFile" accept="video/*" required onchange="document.getElementById('fileName').textContent = this.files[0] ? this.files[0].name : '<%= t.noFileChosen %>'">
            </div>
            <button type="submit"><%= t.uploadAndSync %></button>
        </form>
    </div>
    
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            try {
                const trackpoints = <%- JSON.stringify(trackpoints || []) %>;
                const videoStartPoint = <%- JSON.stringify(videoStartPoint || null) %>;
                const t = <%- JSON.stringify(t || {}) %>;
                const latLngData = trackpoints.map(p => p.latlng).filter(p => p && p.length === 2);

                if (latLngData.length > 0) {
                    const map = L.map('map').setView(latLngData[0], 13);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    }).addTo(map);

                    const polyline = L.polyline(latLngData, { color: '#fc5000', weight: 4 }).addTo(map);
                    map.fitBounds(polyline.getBounds().pad(0.1));

                    const activityStartLatLng = latLngData[0];
                    const activityEndLatLng = latLngData[latLngData.length - 1];
                    const finalStartLatLng = (videoStartPoint && videoStartPoint.latlng) ? videoStartPoint.latlng : activityStartLatLng;

                    const createIcon = (color) => L.icon({
                        iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${color}.png`,
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                        iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41]
                    });

                    const startIcon = createIcon('green');
                    const endIcon = createIcon('red');
                    const originalStartIcon = createIcon('grey');

                    L.marker(finalStartLatLng, { icon: startIcon }).addTo(map).bindPopup(`<strong>${t.start}</strong>`);

                    if (videoStartPoint && videoStartPoint.latlng && (finalStartLatLng[0] !== activityStartLatLng[0] || finalStartLatLng[1] !== activityStartLatLng[1])) {
                        L.marker(activityStartLatLng, { icon: originalStartIcon }).addTo(map).bindPopup(`<strong>${t.originalStart}</strong>`);
                    }

                    L.marker(activityEndLatLng, { icon: endIcon }).addTo(map).bindPopup(`<strong>${t.end}</strong>`);
                     
                } else {
                     document.getElementById('map').innerHTML = `<p>${t.noGpsData || 'No GPS data available.'}</p>`;
                }
            } catch (e) {
                console.error("Erro ao renderizar o mapa:", e);
                document.getElementById('map').innerHTML = '<p>Ocorreu um erro ao carregar o mapa.</p>';
            }
        });
    </script>
</body>
</html>
